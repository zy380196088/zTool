{"version":3,"sources":["grunt.js"],"names":[],"mappings":"AAAA,OAAO,OAAP,GAAiB,UAAS,KAAT,EAAgB;;AAE/B,MAAI,OAAO,QAAQ,eAAR,EAAyB,IAApC;AAAA,MACI,OAAO,QAAQ,MAAR,CADX;AAAA,MAEI,KAAK,QAAQ,IAAR,CAFT;AAAA,MAGI,OAAO,qBAHX;AAAA,MAII,SAAS,mCAJb;;AAMA,QAAM,YAAN,CAAmB,OAAnB,EAA4B,qCAA5B,EAAmE,YAAW;AAC5E,QAAI,SAAS,OAAb;AAAA,QAAsB,UAAU,OAAhC;AAAA,QACI,OAAO,KAAK,KAAL,EADX;AAAA,QACyB,OADzB;;AAIA,aAAS,WAAT,CAAqB,EAArB,EAAyB;AACvB,gBAAU,GAAG,YAAH,CAAgB,kBAAhB,EAAoC,MAApC,CAAV;AACA,gBAAU,QAAQ,OAAR,CAAgB,iBAAhB,EAAmC,EAAnC,CAAV;AACA,SAAG,aAAH,CAAiB,sBAAjB,EAAyC,OAAzC;AACA;AACD;;AAED,aAAS,WAAT,GAAuB;AACrB,UAAI,OAAO,EAAX;AAAA,UACI,MAAM,KAAK,OAAL,CAAa;AACrB,cAAM,IADe;AAErB,cAAM,EAFe;AAGrB,cAAM,MAHe;AAIrB,gBAAQ;AAJa,OAAb,EAKP,UAAS,GAAT,EAAc;AACf,YAAI,WAAJ,CAAgB,MAAhB;AACA,YAAI,EAAJ,CAAO,MAAP,EAAe,UAAS,KAAT,EAAgB;AAC7B,kBAAQ,KAAR;AACD,SAFD;AAGA,YAAI,EAAJ,CAAO,KAAP,EAAc,YAAW;AACvB,aAAG,aAAH,CAAiB,SAAO,YAAxB,EAAsC,IAAtC;AACA,sBAAY,IAAZ;AACD,SAHD;AAID,OAdS,CADV;AAgBA,UAAI,KAAJ,CAAU,QAAV;AACA,UAAI,KAAJ,CAAU,QAAV;AACA,UAAI,GAAJ;AAED;;AAED,aAAS,SAAT,GAAqB;AACnB,UAAI,KAAK,IAAT;AACA,UAAI;AACF,aAAK,GAAG,YAAH,CAAgB,SAAO,YAAvB,EAAqC,MAArC,CAAL;AACA,oBAAY,EAAZ;AACD,OAHD,CAGE,OAAO,CAAP,EAAU;AACV;AACD;AACF;;AAED,SAAK,WAAS,MAAT,GAAgB,YAAhB,GAA6B,OAAlC,EAA2C,SAA3C;AACD,GA9CD;;AAgDA,QAAM,YAAN,CAAmB,OAAnB,EAA4B,kCAA5B,EAAgE,YAAW;AACzE,QAAI,OAAO,KAAK,KAAL,EAAX;AACA,SAAK,8BAAL,EAAqC,YAAW;AAC9C;AACD,KAFD;AAGD,GALD;;AAOA;AACA,QAAM,UAAN,CAAiB;AACf,SAAK,qBADU;AAEf,UAAM;AACJ,aAAO,CAAC,WAAD;AADH,KAFS;AAKf,UAAM;AACJ,aAAO,CAAC,UAAD,EAAa,aAAb,EAA4B,cAA5B;AADH,KALS;AAQf,WAAO;AACL,aAAO,qBADF;AAEL,aAAO;AAFF,KARQ;AAYf,YAAQ;AACN,eAAS;AACP,eAAO,IADA;AAEP,gBAAQ,IAFD;AAGP,eAAO,IAHA;AAIP,iBAAS,IAJF;AAKP,gBAAQ,IALD;AAMP,eAAO,IANA;AAOP,aAAK,IAPE;AAQP,eAAO,IARA;AASP,cAAM,IATC;AAUP,gBAAQ,IAVD;AAWP,cAAM;AAXC,OADH;AAcN,eAAS;AACP,iBAAS;AADF;AAdH;AAZO,GAAjB;;AAgCA;AACA,QAAM,YAAN,CAAmB,SAAnB,EAA8B,YAA9B;AAED,CAnGD","file":"grunt-compiled.js","sourcesContent":["module.exports = function(grunt) {\n  \n  var exec = require('child_process').exec,\n      http = require('http'),\n      fs = require('fs'),\n      host = 'ajax.googleapis.com',\n      jqPath = '/ajax/libs/jquery/1.7.2/jquery.js';\n\n  grunt.registerTask('build', 'builds query module for us in nodje', function() {\n    var tmpDir = './tmp', distDir = './lib',\n        done = this.async(), wrapper;\n\n\n    function buildjQuery(jq) {\n      wrapper = fs.readFileSync('./src/wrapper.js', 'utf8');\n      wrapper = wrapper.replace('//JQUERY_SOURCE', jq);\n      fs.writeFileSync('./lib/node-jquery.js', wrapper);\n      done();\n    }\n\n    function writejQuery() {\n      var data = '',\n          req = http.request({\n        host: host,\n        port: 80, \n        path: jqPath,\n        method: 'GET'\n      }, function(res) {\n        res.setEncoding('utf8');  \n        res.on('data', function(chunk) {\n          data += chunk;  \n        });\n        res.on('end', function() {\n          fs.writeFileSync(tmpDir+'/jquery.js', data);\n          buildjQuery(data);\n        });\n      });\n      req.write('data\\n');\n      req.write('data\\n');\n      req.end();\n\n    }\n\n    function getjQuery() {\n      var jq = null;\n      try {\n        jq = fs.readFileSync(tmpDir+'/jquery.js', 'utf8');  \n        buildjQuery(jq);\n      } catch (e) {\n        writejQuery();\n      }\n    }\n\n    exec('mkdir '+tmpDir+' && mkdir '+distDir, getjQuery);\n  });\n\n  grunt.registerTask('clean', 'removes dist and tmp directories', function() {\n    var done = this.async();\n    exec('rm -rf ./tmp && rm -rf ./lib', function() {\n      done();\n    });\n  });\n\n  // Project configuration.\n  grunt.initConfig({\n    pkg: '<json:package.json>',\n    test: {\n      files: ['test/*.js']\n    },\n    lint: {\n      files: ['grunt.js', 'lib/**/*.js', 'test/**/*.js']\n    },\n    watch: {\n      files: '<config:lint.files>',\n      tasks: 'default'\n    },\n    jshint: {\n      options: {\n        curly: true,\n        eqeqeq: true,\n        immed: true,\n        latedef: true,\n        newcap: true,\n        noarg: true,\n        sub: true,\n        undef: true,\n        boss: true,\n        eqnull: true,\n        node: true\n      },\n      globals: {\n        exports: true\n      }\n    }\n  });\n\n  // Default task.\n  grunt.registerTask('default', 'build test');\n\n};\n"]}